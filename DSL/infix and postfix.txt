#include <iostream>
using namespace std;
  
//Function to return precedence of operators
int prec(char c)
{
    if(c == &#39;^&#39;)
    return 3;
    else if(c == &#39;*&#39; || c == &#39;/&#39;)
    return 2;
    else if(c == &#39;+&#39; || c == &#39;-&#39;)
    return 1;
    else
    return -1;
}
  
// The main function to convert infix expression
//to postfix expression
void infixToPostfix(string s)
{
    std::stack&lt;char&gt; st;
    st.push(&#39;N&#39;);
    int l = s.length();
    string ns;
    for(int i = 0; i &lt; l; i++)
    {
          
        // If the scanned character is 
        // an operand, add it to output string.
        if((s[i] &gt;= &#39;a&#39; &amp;&amp; s[i] &lt;= &#39;z&#39;) || 
           (s[i] &gt;= &#39;A&#39; &amp;&amp; s[i] &lt;= &#39;Z&#39;))
        ns+=s[i];
  
        // If the scanned character is an 
        // ‘(‘, push it to the stack.
        else if(s[i] == &#39;(&#39;)
          
        st.push(&#39;(&#39;);
          
        // If the scanned character is an ‘)’, 

        // pop and to output string from the stack
        // until an ‘(‘ is encountered.
        else if(s[i] == &#39;)&#39;)
        {
            while(st.top() != &#39;N&#39; &amp;&amp; st.top() != &#39;(&#39;)
            {
                char c = st.top();
                st.pop();
               ns += c;
            }
            if(st.top() == &#39;(&#39;)
            {
                char c = st.top();
                st.pop();
            }
        }
          
        //If an operator is scanned
        else{
            while(st.top() != &#39;N&#39; &amp;&amp; prec(s[i]) &lt;= 
                                   prec(st.top()))
            {
                char c = st.top();
                st.pop();
                ns += c;
            }
            st.push(s[i]);
        }
  
    }
    
    // Pop all the remaining elements from the stack
    while(st.top() != &#39;N&#39;)
    {
        char c = st.top();
        st.pop();
        ns += c;
    }
      
    cout &lt;&lt; ns &lt;&lt; endl;
  
}
  
//Driver program to test above functions
int main()
{
    string exp = &quot;a+b*(c^d-e)^(f+g*h)-i&quot;;
    infixToPostfix(exp);
    return 0;
}
